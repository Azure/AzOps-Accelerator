steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Get Latest AzOps version
  # Query PowerShell Gallery for the latest AzOps version
  # to be used as cache key if no version is specified
  #

  - task: PowerShell@2
    displayName: "Get Latest AzOps version"
    condition: eq(variables['AZOPS_MODULE_VERSION'], '')
    inputs:
      targetType: "inline"
      script: |
        $latestVersionUri = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='AzOps'&`$filter=IsLatestVersion"
        $latestVersionId = (Invoke-RestMethod $latestVersionUri).properties.NormalizedVersion
        Write-Host "##vso[task.setvariable variable=AZOPS_MODULE_VERSION;]$latestVersionId"

  #
  # Cache Dependencies
  # Cache dependencies if version has not changed
  #

  - task: Cache@2
    displayName: Cache AzOps module
    condition: ne(variables['AZOPS_MODULE_VERSION'], '')
    # This task will restore modules from cache if key is found.
    inputs:
      key:  '"AzOpsModule" | "$(AZOPS_MODULE_VERSION)"'
      path: $(modulesFolder)
      cacheHitVar: AzOpsModule_IsCached

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: "Dependencies"
    condition: or(eq(variables['AZOPS_MODULE_VERSION'], ''), ne(variables['AzOpsModule_IsCached'], 'true'))
    inputs:
      targetType: "inline"
      script: |
        if(-not (Test-Path -Path '$(modulesFolder)')) {
          mkdir '$(modulesFolder)'
        }
        $params = @{
          Name            = 'AzOps'
          Path            = '$(modulesFolder)'
          Force           = $true
        }
        if('$(AZOPS_MODULE_VERSION)') {
          $params.RequiredVersion = '$(AZOPS_MODULE_VERSION)'
        }
        Save-Module @params

  #
  # Connect
  # Authenticate Azure context
  # If no value is set for ARM_CLIENT_ID connect will try
  # to use a Managed Identity. 
  #

  - task: PowerShell@2
    displayName: "Connect"
    env:
      ARM_CLIENT_SECRET: $(ARM_CLIENT_SECRET)
    inputs:
      targetType: "inline"
      script: |
        $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator  
        $azParams = @{
          SubscriptionId    = '$(ARM_SUBSCRIPTION_ID)'
          TenantId          = '$(ARM_TENANT_ID)'
        }
        if ('$(ARM_ENVIRONMENT)' -in (Get-AzEnvironment).Name) {
          $azParams.Environment = '$(ARM_ENVIRONMENT)'
        }
        if('$(ARM_CLIENT_ID)') {
          $azParams.credential = (New-Object PSCredential -ArgumentList '$(ARM_CLIENT_ID)', (ConvertTo-SecureString -String $Env:ARM_CLIENT_SECRET -AsPlainText -Force))
          Connect-AzAccount -ServicePrincipal @azParams
        } else {        
          Connect-AzAccount -Identity @azParams
        }