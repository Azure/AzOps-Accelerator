---
name: "AzOps - Push"

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Pipelines
#

trigger: none

variables:
  #
  # Strict Mode
  # Enable strict mode when pre consistency checking
  # is required on the repository. When disabled the
  # pre steps will be skipped.
  #

  strict_mode: false

  #
  # Auto Merge
  # When auto merge is enabled, after the deployment
  # is completed, the new state will be pushed to the
  # head branch and the proposed pull request will be
  # merged directly into the base branch.
  #

  auto_merge: true

pool:
  vmImage: "ubuntu-20.04"

jobs:
  - job: pre

    #
    # Pre
    # Before running the resource deployment,
    # we need to validate the repository state
    # is up to date and we won't encounter conflicts.
    #

    displayName: "Pre"
    condition: and(eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.SourceBranch'], 'refs/heads/automated'))

    steps:
      #
      # Checkout
      # Checks-out the repository
      #

      - checkout: self
        fetchDepth: 0
        persistCredentials: true

      #
      # Dependencies
      # Install required runtime modules
      #

      - task: PowerShell@2
        displayName: "Dependencies"
        inputs:
          targetType: "inline"
          script: |
            $module = Find-Module -Name AzOps -AllowPrerelease
            $module.Dependencies | ForEach-Object { Install-Module -Name $_.Name -RequiredVersion $_.MinimumVersion -Force }
            Install-Module -Name AzOps -AllowPrerelease -Force
        condition: contains(variables['strict_mode'], 'true')

      #
      # Connect
      # Authenticate Azure context
      #

      - task: PowerShell@2
        displayName: "Connect"
        inputs:
          targetType: "inline"
          script: |
            $credential = New-Object PSCredential -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
            Connect-AzAccount -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)
        condition: contains(variables['strict_mode'], 'true')

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: "Initialize"
        inputs:
          targetType: "inline"
          script: |
            Import-PSFConfig -Path settings.json -Schema MetaJson
            Initialize-AzOpsRepository -Rebuild
            Get-Job | Remove-Job -Force
        condition: contains(variables['strict_mode'], 'true')

      #
      # Issue
      # Write issue and stop workflow
      #

      - task: Bash@3
        displayName: "Issue"
        name: issue
        inputs:
          targetType: "inline"
          script: |
            DIFF=$(git diff --ignore-space-at-eol --name-status)
            echo $DIFF
            if [ -n "$DIFF" ]
            then
              echo "##vso[task.setvariable variable=state;isOutput=true]stop"
              URL="$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
              curl --request POST \
              --header "Authorization: Bearer $(System.AccessToken)" \
              --header "Content-Type: application/json" \
              --data '{ "comments": [ { "parentCommentId": 0, "content": "Hello!", "commentType": 1 } ], "status": 1 }' \
              --url "$( echo "$URL" | sed 's/ /%20/g' )"
            else
              echo "##vso[task.setvariable variable=state;isOutput=true]continue"
            fi

  - job: push

    #
    # Push
    # Before running the resource deployment,
    # we need to validate the repository state
    # is up to date and we won't encounter conflicts.
    #

    displayName: "Push"
    dependsOn: pre
    condition: contains(dependencies.pre.outputs['issue.state'], 'continue')

    steps:
      #
      # Checkout
      # Checks-out the repository
      #

      - checkout: self
        fetchDepth: 0
        persistCredentials: true

      #
      # Dependencies
      # Install required runtime modules
      #

      - task: PowerShell@2
        displayName: "Dependencies"
        inputs:
          targetType: "inline"
          script: |
            $module = Find-Module -Name AzOps -AllowPrerelease
            $module.Dependencies | ForEach-Object { Install-Module -Name $_.Name -RequiredVersion $_.MinimumVersion -Force }
            Install-Module -Name AzOps -AllowPrerelease -Force

      #
      # Connect
      # Authenticate Azure context
      #

      - task: PowerShell@2
        displayName: "Connect"
        inputs:
          targetType: "inline"
          script: |
            $credential = New-Object PSCredential -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
            Connect-AzAccount -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

      #
      # Diff
      # List index changes
      #

      - task: Bash@3
        displayName: "Diff"
        inputs:
          targetType: "inline"
          script: |
            git diff origin/main --name-status > /tmp/diff.txt

      #
      # Deploy
      # Initial deployment of any index changes
      #

      - task: PowerShell@2
        displayName: "Deploy"
        inputs:
          targetType: "inline"
          script: |
            Import-PSFConfig -Path settings.json -Schema MetaJson
            Initialize-AzOpsEnvironment
            $diff = Get-Content -Path /tmp/diff.txt
            $module = Get-Module -Name AzOps
            $module.Invoke({ Invoke-AzOpsChange -ChangeSet $diff })
            Get-Job | Remove-Job -Force

  - job: post

    #
    # Post
    # Before running the resource deployment,
    # we need to validate the repository state
    # is up to date and we won't encounter conflicts.
    #

    displayName: "Post"
    dependsOn: push
    condition: contains(dependencies.pre.outputs['issue.state'], 'continue')

    steps:
      #
      # Checkout
      # Checks-out the repository
      #

      - checkout: self
        fetchDepth: 0
        persistCredentials: true

      #
      # Configure
      # Set global options
      #

      - task: Bash@3
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Azure DevOps"
            git config user.email "azuredevops@microsoft.com"

      #
      # Switch
      # Change working branch
      #

      - task: Bash@3
        displayName: "Switch"
        inputs:
          targetType: "inline"
          script: |
            sourceBranchName=$(echo $(System.PullRequest.SourceBranch) | sed 's:refs/heads/::')
            git switch -c $sourceBranchName

      #
      # Dependencies
      # Install required runtime modules
      #

      - task: PowerShell@2
        displayName: "Dependencies"
        inputs:
          targetType: "inline"
          script: |
            $module = Find-Module -Name AzOps -AllowPrerelease
            $module.Dependencies | ForEach-Object { Install-Module -Name $_.Name -RequiredVersion $_.MinimumVersion -Force }
            Install-Module -Name AzOps -AllowPrerelease -Force

      #
      # Connect
      # Authenticate Azure context
      #

      - task: PowerShell@2
        displayName: "Connect"
        inputs:
          targetType: "inline"
          script: |
            $credential = New-Object PSCredential -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
            Connect-AzAccount -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: "Initialize"
        inputs:
          targetType: "inline"
          script: |
            Import-PSFConfig -Path settings.json -Schema MetaJson
            Initialize-AzOpsRepository -Rebuild
            Get-Job | Remove-Job -Force

      #
      # Status
      # Check for data changes
      #

      - task: Bash@3
        displayName: "Status"
        inputs:
          targetType: "inline"
          script: |
            STATUS=$(git status --short)
            echo $STATUS
            if [ -z "$STATUS" ]
            then
              echo $STATUS
              echo "##vso[task.setvariable variable=state]stop"
            else
              echo $STATUS
              echo "##vso[task.setvariable variable=state]continue"
            fi

      #
      # Add
      # Add file content to index
      #

      - task: Bash@3
        displayName: "Add"
        inputs:
          targetType: "inline"
          script: |
            git add ./azops
            git status --short
        condition: contains(variables['state'], 'continue')

      #
      # Commit
      # Record changes to the repository
      #

      - task: Bash@3
        displayName: "Commit"
        inputs:
          targetType: "inline"
          script: |
            git commit -m "Automated commit" -m "[skip ci]"
        condition: contains(variables['state'], 'continue')

      #
      # Push
      # Update remote refs along with associated objects
      #

      - task: Bash@3
        displayName: "Push"
        inputs:
          targetType: "inline"
          script: |
            sourceBranchName=$(echo $(System.PullRequest.SourceBranch) | sed 's:refs/heads/::')
            git push origin $sourceBranchName  -f
        condition: contains(variables['state'], 'continue')

      #
      # Merge
      # Automatically merge the Pull Request into base
      #

      - task: Bash@3
        displayName: "Merge"
        inputs:
          targetType: "inline"
          script: |
            az repos pr update \
              --id $(System.PullRequest.PullRequestId) \
              --auto-complete true \
              --squash true \
              --delete-source-branch true
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
        condition: contains(variables['auto_merge'], 'true')
