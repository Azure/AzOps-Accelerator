---
name: 'AzOps - Push'

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Pipelines
#

trigger: none

pool:
  vmImage: 'ubuntu-20.04'

jobs:

- job: pre

  #
  # Pre
  # - Before running the resource deployment,
  # - we need to validate the repository state
  # - is up to date and we won't encounter conflicts.
  #

  displayName: 'Pre'
  condition: and(eq(variables['Build.Reason'], 'PullRequest'), ne(variables['System.PullRequest.SourceBranch'], 'refs/heads/automated'))
  steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        $modules = @(
            @{ Name = "Az.Accounts"; Repository = "PSGallery"; RequiredVersion = "2.2.5" },
            @{ Name = "Az.Billing"; Repository = "PSGallery"; RequiredVersion = "2.0.0" },
            @{ Name = "Az.Resources"; Repository = "PSGallery"; RequiredVersion = "3.2.1" },
            @{ Name = "PSFramework"; Repository = "PSGallery"; RequiredVersion = "1.6.181" },
            @{ Name = "AzOps"; Repository = "PSGallery"; AllowPrerelease = $true }
        )
        $modules | ForEach-Object {
            $module = $_
            Install-Module @module -Force -Verbose
        }

  #
  # Connect
  # Authenticate Azure context
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Initialize
  # Generate new state data
  #

  - task: PowerShell@2
    displayName: 'Initialize'
    inputs:
      targetType: 'inline'
      script: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository -Rebuild
          Get-Job | Remove-Job -Force

  #
  # Diff
  # List index changes
  #

  - task: Bash@3
    displayName: 'Diff'
    name: diff
    inputs:
      targetType: 'inline'
      script: |
        DIFF=$(git diff --ignore-space-at-eol --name-status)
        if [ -z "$DIFF" ]
        then
          echo $DIFF
          echo "##vso[task.setvariable variable=state;isOutput=true]continue"
        else
          echo $DIFF
          echo "##vso[task.setvariable variable=state;isOutput=true]stop"
        fi

  #
  # Issue
  # Write issue and stop workflow
  #

  - task: Bash@3
    displayName: 'Issue'
    condition: contains(variables['diff.state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        URL="$(System.CollectionUri)/$(System.TeamProject)/_apis/git/repositories/$(Build.Repository.Name)/pullRequests/$(System.PullRequest.PullRequestId)/threads?api-version=6.0"
        curl --request POST \
        --header "Authorization: Bearer $(System.AccessToken)" \
        --header "Content-Type: application/json" \
        --data '{ "comments": [ { "parentCommentId": 0, "content": "Hello!", "commentType": 1 } ], "status": 1 }' \
        --url "$( echo "$URL" | sed 's/ /%20/g' )"

- job: push

  #
  # Push
  # -
  # -
  # -
  #

  displayName: 'Push'
  condition: contains(dependencies.pre.outputs['diff.state'], 'continue')
  dependsOn: pre
  steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        $modules = @(
            @{ Name = "Az.Accounts"; Repository = "PSGallery"; RequiredVersion = "2.2.5" },
            @{ Name = "Az.Billing"; Repository = "PSGallery"; RequiredVersion = "2.0.0" },
            @{ Name = "Az.Resources"; Repository = "PSGallery"; RequiredVersion = "3.2.1" },
            @{ Name = "PSFramework"; Repository = "PSGallery"; RequiredVersion = "1.6.181" },
            @{ Name = "AzOps"; Repository = "PSGallery"; AllowPrerelease = $true }
        )
        $modules | ForEach-Object {
            $module = $_
            Install-Module @module -Force -Verbose
        }

  #
  # Connect
  # Authenticate Azure context
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Diff
  # List index changes
  #

  - task: Bash@3
    displayName: 'Diff'
    inputs:
      targetType: 'inline'
      script: |
        git diff origin/main --name-status > /tmp/diff.txt

  #
  # Deploy
  # Initial deployment of any index changes
  #

  - task: PowerShell@2
    displayName: 'Deploy'
    inputs:
      targetType: 'inline'
      script: |
        Import-PSFConfig -Path settings.json -Schema MetaJson
        Initialize-AzOpsEnvironment
        $diff = Get-Content -Path /tmp/diff.txt
        $module = Get-Module -Name AzOps
        $module.Invoke({ Invoke-AzOpsChange -ChangeSet $diff })
        Get-Job | Remove-Job -Force

- job: post

  #
  # Post
  # -
  # -
  # -
  #

  displayName: 'Post'
  condition: contains(dependencies.pre.outputs['diff.state'], 'continue')
  dependsOn: push
  steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Configure
  # Set global options
  #

  - task: Bash@3
    displayName: 'Configure'
    inputs:
      targetType: 'inline'
      script: |
          git config user.name "Azure DevOps"
          git config user.email "azuredevops@microsoft.com"

  #
  # Switch
  # Change working branch
  #

  - task: Bash@3
    displayName: 'Switch'
    inputs:
      targetType: 'inline'
      script: |
        sourceBranchName=$(echo $(System.PullRequest.SourceBranch) | sed 's:refs/heads/::')
        git switch -c $sourceBranchName

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        $modules = @(
            @{ Name = "Az.Accounts"; Repository = "PSGallery"; RequiredVersion = "2.2.5" },
            @{ Name = "Az.Billing"; Repository = "PSGallery"; RequiredVersion = "2.0.0" },
            @{ Name = "Az.Resources"; Repository = "PSGallery"; RequiredVersion = "3.2.1" },
            @{ Name = "PSFramework"; Repository = "PSGallery"; RequiredVersion = "1.6.181" },
            @{ Name = "AzOps"; Repository = "PSGallery"; AllowPrerelease = $true }
        )
        $modules | ForEach-Object {
            $module = $_
            Install-Module @module -Force -Verbose
        }

  #
  # Connect
  # Authenticate Azure context
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Initialize
  # Generate new state data
  #

  - task: PowerShell@2
    displayName: 'Initialize'
    inputs:
      targetType: 'inline'
      script: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository -Rebuild
          Get-Job | Remove-Job -Force

  #
  # Add
  # Add file content to index
  #

  - task: Bash@3
    displayName: 'Add'
    inputs:
      targetType: 'inline'
      script: |
        git add ./azops

  #
  # Commit
  # Record changes to the repository
  #

  - task: Bash@3
    displayName: 'Commit'
    inputs:
      targetType: 'inline'
      script: |
        git commit -m "Automated commit" -m "[skip ci]"

  #
  # Push
  # Update remote refs along with associated objects
  #

  - task: Bash@3
    displayName: 'Push'
    inputs:
      targetType: 'inline'
      script: |
        sourceBranchName=$(echo $(System.PullRequest.SourceBranch) | sed 's:refs/heads/::')
        git push origin $sourceBranchName  -f
