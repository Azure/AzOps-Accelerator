---
name: "AzOps - Push"

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Repos. It's also recommended to manually
# disable CI triggers with overrides.
#

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - root

variables:

  #
  # Credentials
  # This reference is to the Variable Group which needs
  # to be created which will contain the following values.
  # Set AZOPS_MODULE_VERSION to the desired version of the 
  # AzOps Module to enable version pinning and caching.
  #
  # - ARM_TENANT_ID
  # - ARM_SUBSCRIPTION_ID
  # - ARM_CLIENT_ID
  # - ARM_CLIENT_SECRET
  # - AZOPS_MODULE_VERSION   
  #

  - group: credentials

  #
  # modulesFolder
  # To enable caching of PowerShell modules between
  # runs, the modules are stored in a modules folder
  # that can be cached.
  #

  - name: modulesFolder
    value: '$(System.DefaultWorkingDirectory)/Modules'

jobs:

  - job: push

    #
    # Push
    # Before running the resource deployment,
    # we need to validate the repository state
    # is up to date and we won't encounter conflicts.
    #

    displayName: "Push"
    pool:
      vmImage: ubuntu-20.04

    steps:

      #
      # Checkout
      # Checks-out the repository
      #

      - checkout: self
        fetchDepth: 0
        persistCredentials: true

      #
      # Get Latest AzOps version
      # Query PowerShell Gallery for the latest AzOps version
      # to be used as cache key if no version is specified
      #

      - task: PowerShell@2
        displayName: "Get Latest AzOps version"
        condition: eq(variables['AZOPS_MODULE_VERSION'], '')
        inputs:
          targetType: "inline"
          script: |
            $latestVersionUri = "https://www.powershellgallery.com/api/v2/FindPackagesById()?id='AzOps'&`$filter=IsLatestVersion"
            $latestVersionId = (Invoke-RestMethod $latestVersionUri).properties.NormalizedVersion
            Write-Host "##vso[task.setvariable variable=AZOPS_MODULE_VERSION;]$latestVersionId"

      #
      # Cache Dependencies
      # Cache dependencies if version has not changed
      #

      - task: Cache@2
        displayName: Cache AzOps module
        condition: ne(variables['AZOPS_MODULE_VERSION'], '')
        # This task will restore modules from cache if key is found.
        inputs:
          key:  '"AzOpsModule" | "$(AZOPS_MODULE_VERSION)"'
          path: $(modulesFolder)
          cacheHitVar: AzOpsModule_IsCached

      #
      # Dependencies
      # Install required runtime modules
      #

      - task: PowerShell@2
        displayName: "Dependencies"
        condition: or(eq(variables['AZOPS_MODULE_VERSION'], ''), ne(variables['AzOpsModule_IsCached'], 'true'))
        inputs:
          targetType: "inline"
          script: |
            if(-not (Test-Path -Path '$(modulesFolder)')) {
              mkdir '$(modulesFolder)'
            }
            $params = @{
              Name            = 'AzOps'
              Path            = '$(modulesFolder)'
              Force           = $true
            }
            if('$(AZOPS_MODULE_VERSION)') {
              $params.RequiredVersion = '$(AZOPS_MODULE_VERSION)'
            }
            Save-Module @params

      #
      # Connect
      # Authenticate Azure context
      #

      - task: PowerShell@2
        displayName: "Connect"
        inputs:
          targetType: "inline"
          script: |
            $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
            $credential = New-Object PSCredential -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
            Connect-AzAccount -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

      #
      # Diff
      # List index changes
      #

      - task: Bash@3
        displayName: "Diff"
        inputs:
          targetType: "inline"
          script: |
            if [ ! -z "$(git diff --name-status HEAD^ HEAD)" ]; then
              echo $(git diff --name-status HEAD^ HEAD)
              git diff --name-status HEAD^ HEAD > /tmp/diff.txt
              if [ ! -z "$(git diff --diff-filter=D HEAD^ HEAD)" ]; then
                echo $(git diff --diff-filter=D HEAD^ HEAD  --no-prefix | grep ^- | sed -r "s/^([^-+ ]*)[-+ ]/\\1/" | less -r)
                git diff --diff-filter=D HEAD^ HEAD --no-prefix | grep ^- | sed -r "s/^([^-+ ]*)[-+ ]/\\1/" | less -r > /tmp/diffdeletedfiles.txt
              fi
            else
              echo "The validation pipeline failed because there is currently no change to be processed"
              exit 1
            fi

      #
      # Deploy
      # Initial deployment of any index changes
      #

      - task: PowerShell@2
        displayName: "Deploy"
        inputs:
          targetType: "inline"
          script: |
            $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
            Import-PSFConfig -Path settings.json -Schema MetaJson -EnableException
            Initialize-AzOpsEnvironment
            $diff = Get-Content -Path /tmp/diff.txt
            $module = Get-Module -Name AzOps
            if(Test-Path -Path "/tmp/diffdeletedfiles.txt")
            {
              $diffdeletedfiles = Get-Content -Path /tmp/diffdeletedfiles.txt
              $module.Invoke({ Invoke-AzOpsPush -ChangeSet $diff -DeleteSetContents $diffdeletedfiles })
            }
            else{
              $module.Invoke({ Invoke-AzOpsPush -ChangeSet $diff })
            }
            Get-Job | Remove-Job -Force
