---
name: 'Push'

trigger: none

# Temporary

pool:
  name: 'Azure Self-hosted Pipelines'

variables:
  organization: 'lytill'
  project: 'azops-test'
  repository: 'azops-test'
  branch: $(Build.SourceBranchName)
  pullRequest: $(System.PullRequest.PullRequestId)
  timeout: 30

jobs:

- job: pre
  displayName: 'Pre'
  condition: ne(variables['System.PullRequest.SourceBranch'], 'refs/heads/automated')
  timeoutInMinutes: $[variables.timeout]
  workspace:
    clean: all
  steps:

  #
  # Checkout
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Checkout (switch)
  #

  - task: Bash@3
    displayName: 'Checkout'
    inputs:
      targetType: 'inline'
      script: |
        git checkout -b automated
      workingDirectory: 'AzOps-Test'

  #
  # Dependencies
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        Install-Module -Name "AzOps" -AllowPrerelease -Force
        Install-Module -Name @("Az.Accounts", "Az.Billing", "Az.Resources", "PSFramework") -Force

  #
  # Connect
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Initialize
  #

  - task: PowerShell@2
    displayName: 'Initialize'
    inputs:
      targetType: 'inline'
      script: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository
          Get-Job | Remove-Job -Force
      workingDirectory: 'AzOps-Test'

  #
  # Diff
  #

  - task: Bash@3
    displayName: 'Diff'
    inputs:
      targetType: 'inline'
      script: |
        DIFF=$(git diff --ignore-space-at-eol --name-status)
        if [ -z "$DIFF" ]
        then
          echo $DIFF
          echo '##vso[task.setvariable variable=state]continue'
        else
          echo $DIFF
          echo '##vso[task.setvariable variable=state]stop'
        fi
      workingDirectory: 'AzOps-Test'

  #
  # Issue
  #

  - task: Bash@3
    displayName: 'Issue'
    condition: contains(variables['state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        curl --request POST \
        --header "Authorization: Bearer $(System.AccessToken)" \
        --header "Content-Type: application/json" \
        --data '{ "comments": [ { "parentCommentId": 0, "content": "Hello!", "commentType": 1 } ], "status": 1 }' \
        --url https://dev.azure.com/$(organization)/$(project)/_apis/git/repositories/$(repository)/pullRequests/$(pullRequest)/threads?api-version=6.0
      workingDirectory: 'AzOps-Test'

- job: push
  displayName: 'Push'
  condition: contains(variables['state'], 'stop')
  dependsOn: pre
  timeoutInMinutes: $[variables.timeout]
  workspace:
    clean: all
  steps:

  #
  # Checkout
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Dependencies
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        Install-Module -Name "AzOps" -AllowPrerelease -Force
        Install-Module -Name @("Az.Accounts", "Az.Billing", "Az.Resources", "PSFramework") -Force

  #
  # Connect
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Diff
  #

  - task: Bash@3
    displayName: 'Diff'
    inputs:
      targetType: 'inline'
      script: |
        git diff origin/main --name-status > /tmp/diff.txt
      workingDirectory: 'AzOps-Test'

  #
  # Deploy
  #

  - task: PowerShell@2
    displayName: 'Deploy'
    inputs:
      targetType: 'inline'
      script: |
        Import-PSFConfig -Path settings.json -Schema MetaJson
        $diff = Get-Content -Path /tmp/diff.txt
        $module = Get-Module -Name AzOps
        $module.Invoke({ Invoke-AzOpsChange -ChangeSet $diff })
        Get-Job | Remove-Job -Force
      workingDirectory: 'AzOps-Test'

- job: post
  displayName: 'Post'
  condition: contains(variables['state'], 'stop')
  dependsOn: push
  timeoutInMinutes: $[variables.timeout]
  workspace:
    clean: all
  steps:

  #
  # Checkout
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Configure
  #

  - task: Bash@3
    displayName: 'Configure'
    inputs:
      targetType: 'inline'
      script: |
          git config user.name 'Azure DevOps'
          git config user.email 'azuredevops@microsoft.com'
      workingDirectory: 'AzOps-Test'

  #
  # Dependencies
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        Install-Module -Name "AzOps" -AllowPrerelease -Force
        Install-Module -Name @("Az.Accounts", "Az.Billing", "Az.Resources", "PSFramework") -Force

  #
  # Connect
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Initialize
  #

  - task: PowerShell@2
    displayName: 'Initialize'
    inputs:
      targetType: 'inline'
      script: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository
      workingDirectory: 'AzOps-Test'

  #
  # Add
  #

  - task: Bash@3
    displayName: 'Add'
    inputs:
      targetType: 'inline'
      script: |
        git add ./azops
      workingDirectory: 'AzOps-Test'

  #
  # Commit
  #

  - task: Bash@3
    displayName: 'Commit'
    inputs:
      targetType: 'inline'
      script: |
        git commit -m 'Automated commit'
      workingDirectory: 'AzOps-Test'

  #
  # Push
  #

  - task: Bash@3
    displayName: 'Push'
    inputs:
      targetType: 'inline'
      script: |
        git push origin $(branch)  -f
      workingDirectory: 'AzOps-Test'
