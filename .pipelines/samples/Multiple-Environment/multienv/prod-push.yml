---
name: "AzOps-Prod-Push"

trigger:
  branches:
    include:
      - main
  paths:
    include:
      - azops-prod
  #tags: 
  #NB: Cannot use tags AND branch filters together 
  #https://docs.microsoft.com/en-us/azure/devops/pipelines/repos/azure-repos-git?view=azure-devops&tabs=yaml#tags

variables:
  - group: AZURECREDENTIALS_PROD

  - name: settingsfile
    value: "azops-prod-settings.json"

  - name: tempbranch
    value: "automated-prod"

pool:
  vmImage: "ubuntu-20.04"

stages:
- stage: BuildBranchCheck
  jobs:
  - job: BuildCheck
    timeoutInMinutes: 10
    displayName: BuildCheck
    steps:
    - bash: | 
        echo "This stage validates the source branch condition immediately."
        echo "It runs on a separate *stage* which is NOT linked to an environment in order to avoid waiting for unnecessary environment approvals"
      displayName: About

    - bash: | 
        echo "Source Branch is $(Build.SourceBranch)"
        echo "AzOps automated temp branch set to $(tempbranch)"
        echo "AzOps settings file is : $(settingsfile)"
        echo "Build Reason $(Build.Reason)"
        echo "PR Id $(System.PullRequest.PullRequestId)"
        echo "SourceVersionMessage $(Build.SourceVersionMessage)"
        echo "SourceVersion $(Build.SourceVersion)"
      displayName: "Parameter Inspection"

    - task: PowerShell@2
      name: sourcepr
      inputs:
        targetType: 'inline'
        script: |
          #I should probably write this as a regex, but first cut will be more readable/debuggable as string manipulation in stages

          $triggerCiMessage='$(Build.SourceVersionMessage)'
          Write-Output "Trigger Ci source message:  $triggerCiMessage"

          if($triggerCiMessage.startswith("Merge pull request")) {
            Write-Output "The Push has been successfully triggereed by a PR being merged"

            if($triggerCiMessage.endswith(" into main")) {
              Write-Output "The Push is targetting the main branch"

              if ($triggerCiMessage.contains(" from automated")) {
                Write-Output "The triggering branch was from an automated AzOps branch."
                
                Write-Output "Setting variable to skip push, as it's not needed for Automated AzOps changes"
                
                #We don't want the Push to work from Automated AzOps branch PR's.
                echo "##vso[task.setvariable variable=skipPush;isOutput=true]true"
              }
            }
          }
      displayName: "Lookup source PR branch"

# We don't want to push the AzOps automated OOB changes from a pull, uses condition to skip.
- stage: AzOpsDeploy
  dependsOn: BuildBranchCheck
  condition: ne(dependencies.BuildBranchCheck.outputs['BuildCheck.sourcepr.skipPush'], 'true')
  jobs:
    - deployment: EnvironmentApproval
      displayName: "Wait for any Environment Approvals"
      environment: 'Prod'

    - job: push
      dependsOn: EnvironmentApproval
      displayName: "Push to Azure"
      variables:
        skipPush: $[ stageDependencies.BuildBranchCheck.BuildCheck.outputs['sourcepr.skipPush'] ]

      steps:
        - checkout: self
          displayName: "Checkout the repository"
          fetchDepth: 0
          persistCredentials: true

        # Install required runtime modules
        - template: ../templates/AzOpsInstall.yml

        # Authenticate Azure context
        - template: ../templates/AzureLoginWithSp.yml

        # Create git difference
        - template: ../templates/GitCreateDiff.yml

        # Invoke AzOps to deploy changes
        - template: ../templates/AzOpsInvoke.yml

        - task: Bash@3
          displayName: "Trigger Pull"
          inputs:
            targetType: "inline"
            script: az pipelines run --name AzOps-Prod-Pull
          env:
            AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)