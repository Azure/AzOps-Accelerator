---
name: "AzOps - Pull"

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Repos. It's also recommended to manually
# disable CI triggers with overrides.
#

trigger: none

#
# Schedule
# This is an optional trigger to pull the latest Azure
# hierarchy into the Git repository in a recurring
# manner.
#
# Default: Every 6 hours
#

schedules:
  - cron: "0 */6 * * *"
    branches:
      include:
        - main
    always: true

#
# Pipelines
# Triggers this pipeline upon the completion of
# the Push pipeline.
#

resources:
  pipelines:
    - pipeline: 'Pull'
      source: 'AzOps - Push'
      trigger:
        branches:
          include:
            - main

variables:

  #
  # Credentials
  # This reference is to the Variable Group which needs
  # to be created which will contain the following values.
  #
  # - ARM_TENANT_ID
  # - ARM_SUBSCRIPTION_ID
  # - ARM_CLIENT_ID
  # - ARM_CLIENT_SECRET
  #

  - group: credentials

  #
  # Folder Name
  # By default we generate the hierachy within the
  # 'azops' folder within the root of the repository.
  # If this property is modified, the config value within
  # the settings.json file - Core.State will also need
  # to be changed.
  #
  # Default: root
  #

  - name: folder
    value: "root"

  #
  # Branch Name
  # As part of the Pull workflow we check a temporary branch
  # this branch was previously know as system, this value can
  # be changed if this name is already reserved for other systems
  # within the repository.
  #
  # Default: automated
  #

  - name: branch
    value: "automated"

  #
  # Commit Message
  # During the Pull workflow, the changes are commited to the
  # temporary branch, the message which is applied within the
  # Git history can be changed as needed.
  #
  # Default: Automated commit
  #

  - name: commit_message
    value: "Automated commit"

  #
  # Pull Request
  # The generated Pull Request for the Pull workflow can be
  # modified to help indicate when changes we're merged in the
  # Git history.
  #
  # Default: Automated state
  #

  - name: pull_request
    value: "Automated State"

jobs:

  - job: pull

    #
    # Pull
    #

    displayName: "Pull"
    pool:
      vmImage: "ubuntu-20.04"

    steps:

      #
      # Checkout
      # Checks-out the repository
      #

      - checkout: self
        fetchDepth: 0
        persistCredentials: true

      #
      # Configure
      # Set global options
      #

      - task: Bash@3
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Azure DevOps"
            git config user.email "azuredevops@microsoft.com"

      #
      # Checkout
      # Switch branches
      #

      - task: Bash@3
        displayName: "Checkout"
        inputs:
          targetType: "inline"
          script: |
            git checkout -b $(branch)

      #
      # Dependencies
      # Install required runtime modules
      #

      - task: PowerShell@2
        displayName: "Dependencies"
        inputs:
          targetType: "inline"
          script: |
            Install-Module -Name AzOps -Force

      #
      # Connect
      # Authenticate Azure context
      #

      - task: PowerShell@2
        displayName: "Connect"
        inputs:
          targetType: "inline"
          script: |
            $credential = New-Object PSCredential -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
            Connect-AzAccount -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: "Initialize"
        inputs:
          targetType: "inline"
          script: |
            Import-PSFConfig -Path settings.json -Schema MetaJson
            Invoke-AzOpsPull -Rebuild
            Get-Job | Remove-Job -Force

      #
      # Status
      # Check for data changes
      #

      - task: Bash@3
        displayName: "Status"
        inputs:
          targetType: "inline"
          script: |
            STATUS=$(git status --short)
            echo $STATUS
            if [ -z "$STATUS" ]
            then
              echo "##vso[task.setvariable variable=state]stop"
            else
              echo "##vso[task.setvariable variable=state]continue"
            fi

      #
      # Add
      # Add file content to index
      #

      - task: Bash@3
        displayName: "Add"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git add ./$(folder)


      #
      # Commit
      # Record changes to the repository
      #

      - task: Bash@3
        displayName: "Commit"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git commit -m "$(commit_message)"


      #
      # Push
      # Update remote refs along with associated objects
      #

      - task: Bash@3
        displayName: "Push"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git push origin $(branch) -f


      #
      # Merge
      # Update remote refs along with associated objects
      #

      - task: Bash@3
        displayName: "Merge"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            az repos pr create \
              --title "$(pull_request)" \
              --source-branch "$(branch)" \
              --target-branch "main" \
              --squash true \
              --delete-source-branch true \
              --auto-complete true
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
