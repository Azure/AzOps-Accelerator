---
name: 'AzOps - Pull'

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Pipelines
#

trigger: none

  #
  # Schedule
  # This is an [optional] event to get latest Azure
  # hierarchy of Management Group and Subscription in
  # your Git in recurring manner. Default is every 6 hours
  #
  # Adjust frequency based on your organization need
  #

schedules:
  - cron: "0 */6 * * *"
    branches:
      include:
        - main
    always: true

pool:
  vmImage: "ubuntu-20.04"

jobs:

- job: pull

  #
  # Pull
  #

  displayName: 'Pull'
  steps:

  #
  # Checkout
  # Checks-out the repository
  #

  - checkout: self
    fetchDepth: 0
    persistCredentials: true

  #
  # Configure
  # Set global options
  #

  - task: Bash@3
    displayName: 'Configure'
    inputs:
      targetType: 'inline'
      script: |
          git config user.name "Azure DevOps"
          git config user.email "azuredevops@microsoft.com"

  #
  # Checkout
  # Switch branches
  #

  - task: Bash@3
    displayName: 'Checkout'
    inputs:
      targetType: 'inline'
      script: |
        git checkout -b automated

  #
  # Dependencies
  # Install required runtime modules
  #

  - task: PowerShell@2
    displayName: 'Dependencies'
    inputs:
      targetType: 'inline'
      script: |
        $modules = @(
            @{ Name = "Az.Accounts"; Repository = "PSGallery"; RequiredVersion = "2.2.5" },
            @{ Name = "Az.Billing"; Repository = "PSGallery"; RequiredVersion = "2.0.0" },
            @{ Name = "Az.Resources"; Repository = "PSGallery"; RequiredVersion = "3.2.1" },
            @{ Name = "PSFramework"; Repository = "PSGallery"; RequiredVersion = "1.6.181" },
            @{ Name = "AzOps"; Repository = "PSGallery"; AllowPrerelease = $true }
        )
        $modules | ForEach-Object {
            $module = $_
            Install-Module @module -Force -Verbose
        }

  #
  # Connect
  # Authenticate Azure context
  #

  - task: PowerShell@2
    displayName: 'Connect'
    inputs:
      targetType: 'inline'
      script: |
          $credential = New-Object System.Management.Automation.PSCredential `
            -ArgumentList $(ARM_CLIENT_ID), (ConvertTo-SecureString -String $(ARM_CLIENT_SECRET) -AsPlainText -Force)
          Connect-AzAccount `
            -TenantId $(ARM_TENANT_ID) -ServicePrincipal -Credential $credential -SubscriptionId $(ARM_SUBSCRIPTION_ID)

  #
  # Initialize
  # Generate new state data
  #

  - task: PowerShell@2
    displayName: 'Initialize'
    inputs:
      targetType: 'inline'
      script: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository -Rebuild
          Get-Job | Remove-Job -Force

  #
  # Status
  # Check for data changes
  #

  - task: Bash@3
    displayName: 'Status'
    inputs:
      targetType: 'inline'
      script: |
        STATUS=$(git status --short)
        if [ -z "$STATUS" ]
        then
          echo $STATUS
          echo "##vso[task.setvariable variable=state]continue"
        else
          echo $STATUS
          echo "##vso[task.setvariable variable=state]stop"
        fi

  #
  # Add
  # Add file content to index
  #

  - task: Bash@3
    displayName: 'Add'
    condition: contains(variables['state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        git add ./azops

  #
  # Commit
  # Record changes to the repository
  #

  - task: Bash@3
    displayName: 'Commit'
    condition: contains(variables['state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        git commit -m "Automated commit"

  #
  # Push
  # Update remote refs along with associated objects
  #

  - task: Bash@3
    displayName: 'Push'
    condition: contains(variables['state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        git push origin automated -f

  #
  # Merge
  # Update remote refs along with associated objects
  #

  - task: Bash@3
    displayName: 'Merge'
    condition: contains(variables['state'], 'stop')
    inputs:
      targetType: 'inline'
      script: |
        az repos pr create \
          --title "Automated State" \
          --source-branch "automated" \
          --target-branch "main" \
          --squash true \
          --delete-source-branch true \
          --auto-complete true
    env:
      AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
