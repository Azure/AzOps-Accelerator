---
name: "AzOps - Pull"

#
# Triggers
# Automated triggers are configured via Branch Policies
# within Azure Repos. It's also recommended to manually
# disable CI triggers with overrides.
#

trigger: none

#
# Schedule
# This is an optional trigger to pull the latest Azure
# hierarchy into the Git repository in a recurring
# manner.
#
# Default: Every 6 hours
#

schedules:
  - cron: "0 */6 * * *"
    branches:
      include:
        - main
    always: true

#
# Pipelines
# Triggers this pipeline upon the completion of
# the Push pipeline.
#

resources:
  pipelines:
    - pipeline: 'Pull'
      source: 'AzOps - Push'
      trigger:
        branches:
          include:
            - main

variables:
  
  #
  # Shared variables
  # Include shared variables from the 'vars.yml' file
  # to not have to repeat them in every pipeline.
  #

  - template: .templates/vars.yml

  #
  # Folder Name
  # By default we generate the hierachy within the
  # 'root' folder within the root of the repository.
  # If this property is modified, the config value within
  # the settings.json file - Core.State will also need
  # to be changed.
  #
  # Default: root
  #

  - name: folder
    value: "root"

  #
  # Branch Name
  # As part of the Pull workflow we check a temporary branch
  # this branch was previously know as system, this value can
  # be changed if this name is already reserved for other systems
  # within the repository.
  #
  # Default: automated
  #

  - name: branch
    value: "automated"

  #
  # Commit Message
  # During the Pull workflow, the changes are commited to the
  # temporary branch, the message which is applied within the
  # Git history can be changed as needed.
  #
  # Default: Automated commit
  #

  - name: commit_message
    value: "Automated commit"

  #
  # Pull Request
  # The generated Pull Request for the Pull workflow can be
  # modified to help indicate when changes we're merged in the
  # Git history.
  #
  # Default: Automated state
  #

  - name: pull_request
    value: "Automated State"

jobs:

  - job: pull

    #
    # Pull
    #

    displayName: "Pull"
    pool:
      vmImage: "ubuntu-20.04"

    steps:

      #
      # Shared steps
      # Include shared steps from the 'shared.yml' file
      # to not have to repeat them in every pipeline.
      #
      
      - template: .templates/sharedSteps.yml

      #
      # Configure
      # Set global options
      #

      - task: PowerShell@2
        displayName: "Configure"
        inputs:
          targetType: "inline"
          script: |
            git config user.name "Azure DevOps"
            git config user.email "azuredevops@microsoft.com"

      #
      # Checkout
      # Switch branches
      #

      - task: PowerShell@2
        displayName: "Checkout"
        inputs:
          targetType: "inline"
          script: |
            git checkout -b $(branch)

      #
      # Initialize
      # Generate new state data
      #

      - task: PowerShell@2
        displayName: "Initialize"
        inputs:
          targetType: "inline"
          script: |
            $Env:PSModulePath = $Env:PSModulePath, '$(modulesFolder)' -join [IO.Path]::PathSeparator
            Import-PSFConfig -Path settings.json -Schema MetaJson -EnableException
            Invoke-AzOpsPull -Rebuild
            Get-Job | Remove-Job -Force

      #
      # Status
      # Check for data changes
      #

      - task: PowerShell@2
        displayName: "Status"
        inputs:
          targetType: "inline"
          script: |
            $gitStatus = git status --short $(folder)
            if ($null -ne $gitStatus) {
              $gitStatus | Write-Host
              Write-Host '##vso[task.setvariable variable=state]continue'
            }
            else {
              Write-Host '##vso[task.setvariable variable=state]stop'
            }

      #
      # Add
      # Add file content to index
      #

      - task: PowerShell@2
        displayName: "Add"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git add ./$(folder)


      #
      # Commit
      # Record changes to the repository
      #

      - task: PowerShell@2
        displayName: "Commit"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git commit -m "$(commit_message)"


      #
      # Push
      # Update remote refs along with associated objects
      #

      - task: PowerShell@2
        displayName: "Push"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            git push origin $(branch) -f


      #
      # Merge
      # Update remote refs along with associated objects
      #

      - task: PowerShell@2
        displayName: "Merge"
        condition: contains(variables['state'], 'continue')
        inputs:
          targetType: "inline"
          script: |
            # Check if active PR already exists
            $pr = az repos pr list `
              --source-branch "$(branch)" `
              --target-branch "main" `
              --status "active" | ConvertFrom-Json -NoEnumerate

            if ($pr) {
              Write-Host 'Active PR found with Id:' $pr.pullRequestId
            } else {
              # Open new PR
              $pr = az repos pr create `
                --title "$(pull_request)" `
                --source-branch "$(branch)" `
                --target-branch "main" `
                --squash true `
                --delete-source-branch true `
                --auto-complete true | ConvertFrom-Json -NoEnumerate
              
              Write-Host 'PR created with Id:' $pr.pullRequestId
            }
            
            # Complete any active PR, new or existing
            $completePullRequest = $env:AZOPS_SKIP_PR_COMPLETION -ne 'true'
            if ($completePullRequest) {
              $prId = $pr.pullRequestId
              $pr = az repos pr show --id $prId | ConvertFrom-Json -NoEnumerate
              # If PR is not completed, then complete it bypassing policy
              if ($pr.status -eq 'active') {
                Write-Host 'Completing PR bypassing branch policy'
                az repos pr update --status completed --id $prId --bypass-policy true --bypass-policy-reason 'Automated pull request'
              }
            }
        env:
          AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
