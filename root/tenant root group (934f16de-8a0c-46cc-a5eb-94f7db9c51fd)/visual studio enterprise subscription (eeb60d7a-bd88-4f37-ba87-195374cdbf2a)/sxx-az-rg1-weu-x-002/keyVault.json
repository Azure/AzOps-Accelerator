{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "keyVaultName": {
            "type": "string",
            "defaultValue": "",
            "maxLength": 24,
            "metadata": {
                "description": "Optional. Name of the Key Vault. If no name is provided, then unique name will be created."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "Optional. Location for all resources."
            }
        },
        "accessPolicies": {
            "type": "array",
            "defaultValue": [
            ],
            "metadata": {
                "description": "Optional. Array of access policies object"
            }
        },
        "secretsObject": {
            "type": "secureObject",
            "defaultValue": {
                "secrets": [
                ]
            },
            "metadata": {
                "description": "Optional. All secrets [{\"secretName\":\"\",\"secretValue\":\"\"} wrapped in a secure object]"
            }
        },
        "keysObject": {
            "type": "secureObject",
            "defaultValue": {
                "keys": [
                ]
            },
            "metadata": {
                "description": "Optional. All keys [{\"keyName\":\"\",\"keyType\":\"\",\"keyOps\":\"\",\"keySize\":\"\",\"curvename\":\"\"} wrapped in a secure object]"
            }
        },
        "enableVaultForDeployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the vault is enabled for deployment by script or compute"
            }
        },
        "enableVaultForTemplateDeployment": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the vault is enabled for a template deployment"
            }
        },
        "enableVaultForDiskEncryption": {
            "type": "bool",
            "defaultValue": true,
            "allowedValues": [
                true,
                false
            ],
            "metadata": {
                "description": "Optional. Specifies if the azure platform has access to the vault for enabling disk encryption scenarios."
            }
        },
        "enableSoftDelete": {
            "type": "bool",
            "defaultValue": true,
            "metadata": {
                "description": "Optional. Switch to enable/disable Key Vault's soft delete feature."
            }
        },
        "softDeleteRetentionInDays": {
            "type": "int",
            "defaultValue": 90,
            "metadata": {
                "description": "Optional. softDelete data retention days. It accepts >=7 and <=90."
            }
        },
        "enableRbacAuthorization": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Property that controls how data actions are authorized. When true, the key vault will use Role Based Access Control (RBAC) for authorization of data actions, and the access policies specified in vault properties will be ignored (warning: this is a preview feature). When false, the key vault will use the access policies specified in vault properties, and any policy stored on Azure Resource Manager will be ignored. If null or not specified, the vault is created with the default value of false. Note that management actions are always authorized with RBAC."
            }
        },
        "createMode": {
            "type": "string",
            "defaultValue": "default",
            "metadata": {
                "description": "Optional. The vault's create mode to indicate whether the vault need to be recovered or not. - recover or default."
            }
        },
        "enablePurgeProtection": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Provide 'true' to enable Key Vault's purge protection feature."
            }
        },
        "vaultSku": {
            "type": "string",
            "defaultValue": "Premium",
            "allowedValues": [
                "Premium",
                "Standard"
            ],
            "metadata": {
                "description": "Optional. Specifies the SKU for the vault"
            }
        },
        "networkAcls": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Service endpoint object information"
            }
        },
        "vNetId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Virtual Network resource identifier, if networkAcls is passed, this value must be passed as well"
            }
        },
        "diagnosticSettingName": {
            "type": "string",
            "defaultValue": "service",
            "metadata": {
                "description": "Optional. The name of the Diagnostic setting."
            }
        },
        "diagnosticLogsRetentionInDays": {
            "type": "int",
            "defaultValue": 365,
            "minValue": 0,
            "maxValue": 365,
            "metadata": {
                "description": "Optional. Specifies the number of days that logs will be kept for; a value of 0 will retain data indefinitely."
            }
        },
        "diagnosticStorageAccountId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of the Diagnostic Storage Account."
            }
        },
        "workspaceId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource identifier of Log Analytics."
            }
        },
        "eventHubAuthorizationRuleId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Resource ID of the event hub authorization rule for the Event Hubs namespace in which the event hub should be created or streamed to."
            }
        },
        "eventHubName": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Name of the event hub within the namespace to which logs are streamed. Without this, an event hub is created for each log category."
            }
        },
        "lockForDeletion": {
            "type": "bool",
            "defaultValue": false,
            "metadata": {
                "description": "Optional. Switch to lock Key Vault from deletion."
            }
        },
        "roleAssignments": {
            "defaultValue": [
            ],
            "type": "array",
            "metadata": {
                "description": "Optional. Array of role assignment objects that contain the 'roleDefinitionIdOrName' and 'principalId' to define RBAC role assignments on this resource. In the roleDefinitionIdOrName attribute, you can provide either the display name of the role definition, or its fully qualified ID in the following format: '/providers/Microsoft.Authorization/roleDefinitions/c2f4ef07-c644-48eb-af81-4b1b4947fb11'"
            }
        },
        "privateEndpoints": {
            "type": "array",
            "defaultValue": [],
            "metadata": {
                "description": "Optional. Configuration Details for private endpoints."
            }
        },
        "tags": {
            "type": "object",
            "defaultValue": {
            },
            "metadata": {
                "description": "Optional. Resource tags."
            }
        },
        "cuaId": {
            "type": "string",
            "defaultValue": "",
            "metadata": {
                "description": "Optional. Customer Usage Attribution id (GUID). This GUID must be previously registered"
            }
        },
        "baseTime": {
            "type": "string",
            "defaultValue": "[utcNow('u')]",
            "metadata": {
                "description": "Generated. Do not provide a value! This date value is used to generate a SAS token to access the modules."
            }
        }
    },

    "variables": {
        "moduleName": "Key Vault",
        "maxNameLength": 24,
        "uniqueKeyVaultNameUntrim": "[uniqueString(concat(variables('moduleName'),parameters('baseTime')))]",
        "uniqueKeyVaultName": "[if(greater(length(variables('uniqueKeyVaultNameUntrim')),variables('maxNameLength')),substring(variables('uniqueKeyVaultNameUntrim'),0,variables('maxNameLength')),variables('uniqueKeyVaultNameUntrim'))]",
        "keyVaultName": "[if(empty(parameters('keyVaultName')),variables('uniqueKeyVaultName'),parameters('keyVaultName'))]",
        "deployServiceEndpoint": "[not(empty(parameters('networkAcls')))]",
        "virtualNetworkRules": {
            "copy": [
                {
                    "name": "virtualNetworkRules",
                    "count": "[if(not(variables('deployServiceEndpoint')), 0, length(parameters('networkAcls').virtualNetworkRules))]",
                    "input": {
                        "id": "[concat(parameters('vNetId'), '/subnets/', parameters('networkAcls').virtualNetworkRules[copyIndex('virtualNetworkRules')].subnet)]"
                    }
                }
            ]
        },
        "networkAcls": {
            "bypass": "[if(not(variables('deployServiceEndpoint')), json('null'), parameters('networkAcls').bypass)]",
            "defaultAction": "[if(not(variables('deployServiceEndpoint')), json('null'), parameters('networkAcls').defaultAction)]",
            "virtualNetworkRules": "[if(not(variables('deployServiceEndpoint')), json('null'), if(equals(length(parameters('networkAcls').virtualNetworkRules), 0), variables('emptyArray'), variables('virtualNetworkRules').virtualNetworkRules))]",
            "ipRules": "[if(not(variables('deployServiceEndpoint')), json('null'), if(equals(length(parameters('networkAcls').ipRules), 0), variables('emptyArray'), parameters('networkAcls').ipRules))]"
        },
        "emptyArray": [
        ],
        "diagnosticsMetrics": [
            {
                "category": "AllMetrics",
                "timeGrain": null,
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "diagnosticsLogs": [
            {
                "category": "AuditEvent",
                "enabled": true,
                "retentionPolicy": {
                    "enabled": true,
                    "days": "[parameters('diagnosticLogsRetentionInDays')]"
                }
            }
        ],
        "builtInRoleNames": {
            "Owner": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '8e3af657-a8ff-443c-a75c-2fe8c4bcb635')]",
            "Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b24988ac-6180-42a0-ab88-20f7382dd24c')]",
            "Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'acdd72a7-3385-48ef-bd42-f606fba81ae7')]",
            "Key Vault Administrator (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '00482a5a-887f-4fb3-b363-3b7fe8e74483')]",
            "Key Vault Certificates Officer (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a4417e6f-fecd-4de8-b567-7b0420556985')]",
            "Key Vault Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'f25e0fa2-a7c8-4377-a976-54943a77a395')]",
            "Key Vault Crypto Officer (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '14b46e9e-c2b7-41b4-b07b-48a6ebf60603')]",
            "Key Vault Crypto Service Encryption User (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'e147488a-f6f5-4113-8e2d-b22465e65bf6')]",
            "Key Vault Crypto User (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '12338af0-0e69-4776-bea7-57ae8d297424')]",
            "Key Vault Reader (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '21090545-7ca7-4776-b22c-e363652d74d2')]",
            "Key Vault Secrets Officer (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b86a8fe4-44ce-4948-aee5-eccb2c155cd7')]",
            "Key Vault Secrets User (preview)": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '4633458b-17de-408a-b874-0445c86b69e6')]",
            "Log Analytics Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '92aaf0da-9dab-42b6-94a3-d43ce8d16293')]",
            "Log Analytics Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '73c42c96-874c-492b-b04d-ab87d138a893')]",
            "Managed Application Contributor Role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '641177b8-a67a-45b9-a033-47bc880bb21e')]",
            "Managed Application Operator Role": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'c7393b34-138c-406f-901b-d8cf2b17e6ae')]",
            "Managed Applications Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'b9331d33-8a36-4f8c-b097-4f54124fdb44')]",
            "Monitoring Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '749f88d5-cbae-40b8-bcfc-e573ddc772fa')]",
            "Monitoring Metrics Publisher": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '3913510d-42f4-4e42-8a64-420c390055eb')]",
            "Monitoring Reader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '43d0d8ad-25c7-4714-9337-8ba259a9fe05')]",
            "Resource Policy Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '36243c78-bf99-498c-9df9-86d9f8d28608')]",
            "User Access Administrator": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '18d7d88d-d35e-4fb5-a5c3-7773c20a72d9')]",
            "Azure Service Deploy Release Management Contributor": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', '21d96096-b162-414a-8302-d8354f9d91b2')]",
            "masterreader": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/', 'a48d7796-14b4-4889-afef-fbb65a93e5a2')]"
        }
    },
    "resources": [
        {
            "condition": "[not(empty(parameters('cuaId')))]",
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat('pid-', parameters('cuaId'))]",
            "properties": {
                "mode": "Incremental",
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "resources": [
                    ]
                }
            }
        },
        // Key Vault
        {
            "type": "Microsoft.KeyVault/vaults",
            "apiVersion": "2019-09-01",
            "name": "[variables('keyVaultName')]",
            "location": "[parameters('location')]",
            "tags": "[parameters('tags')]",
            "properties": {
                "enabledForDeployment": "[parameters('enableVaultForDeployment')]",
                "enabledForTemplateDeployment": "[parameters('enableVaultForTemplateDeployment')]",
                "enabledForDiskEncryption": "[parameters('enableVaultForDiskEncryption')]",
                "enableSoftDelete": "[parameters('enableSoftDelete')]",
                "softDeleteRetentionInDays": "[parameters('softDeleteRetentionInDays')]",
                "enableRbacAuthorization": "[parameters('enableRbacAuthorization')]",
                "createMode": "[parameters('createMode')]",
                "enablePurgeProtection": "[if(not(parameters('enablePurgeProtection')), json('null'), parameters('enablePurgeProtection'))]",
                "tenantId": "[subscription().tenantId]",
                "accessPolicies": "[parameters('accessPolicies')]",
                "sku": {
                    "name": "[parameters('vaultSku')]",
                    "family": "A"
                },
                "networkAcls": "[if(not(variables('deployServiceEndpoint')), json('null'), variables('networkAcls'))]"
            },
            "resources": [
                {
                    "type": "providers/locks",
                    "apiVersion": "2016-09-01",
                    "condition": "[parameters('lockForDeletion')]",
                    "name": "Microsoft.Authorization/keyVaultDoNotDelete",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
                    ],
                    "comments": "Resource lock on Azure Key Vault",
                    "properties": {
                        "level": "CannotDelete"
                    }
                },
                {
                    "type": "Microsoft.KeyVault/vaults/providers/diagnosticsettings",
                    "apiVersion": "2017-05-01-preview",
                    "name": "[concat(variables('keyVaultName'), '/Microsoft.Insights/', parameters('diagnosticSettingName'))]",
                    "location": "[parameters('location')]",
                    "condition": "[or(not(empty(parameters('diagnosticStorageAccountId'))),not(empty(parameters('workspaceId'))),not(empty(parameters('eventHubAuthorizationRuleId'))),not(empty(parameters('eventHubName'))))]",
                    "dependsOn": [
                        "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
                    ],
                    "properties": {
                        "storageAccountId": "[if(empty(parameters('diagnosticStorageAccountId')), json('null'), parameters('diagnosticStorageAccountId'))]",
                        "workspaceId": "[if(empty(parameters('workspaceId')), json('null'), parameters('workspaceId'))]",
                        "eventHubAuthorizationRuleId": "[if(empty(parameters('eventHubAuthorizationRuleId')), json('null'), parameters('eventHubAuthorizationRuleId'))]",
                        "eventHubName": "[if(empty(parameters('eventHubName')), json('null'), parameters('eventHubName'))]",
                        "metrics": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsMetrics'))]",
                        "logs": "[if(and(empty(parameters('diagnosticStorageAccountId')), empty(parameters('workspaceId')), empty(parameters('eventHubAuthorizationRuleId')), empty(parameters('eventHubName'))), json('null'), variables('diagnosticsLogs'))]"
                    }
                }
            ]
        },
        // Key Vault Secrets
        {
            "type": "Microsoft.KeyVault/vaults/secrets",
            "apiVersion": "2019-09-01",
            "condition": "[not(empty(parameters('secretsObject').secrets))]",
            "name": "[if(empty(parameters('secretsObject').secrets), concat(variables('keyVaultName'), '/', 'secretEntity'), concat(variables('keyVaultName'), '/', parameters('secretsObject').secrets[copyIndex()].secretName))]",
            "properties": {
                "value": "[parameters('secretsObject').secrets[copyIndex()].secretValue]"
            },
            "dependsOn": [
                "[concat('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
            ],
            "copy": {
                "name": "secretsCopy",
                "count": "[length(parameters('secretsObject').secrets)]"
            }
        },
        // Key Vault Keys
        {
            "type": "Microsoft.KeyVault/vaults/keys",
            "apiVersion": "2019-09-01",
            "condition": "[not(empty(parameters('keysObject').keys))]",
            "name": "[if(empty(parameters('keysObject').keys), concat(variables('keyVaultName'), '/', 'keyEntity'), concat(variables('keyVaultName'), '/', parameters('keysObject').keys[copyIndex()].keyName))]",
            "location": "[parameters('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]"
            ],
            "properties": {
                "kty": "[parameters('keysObject').keys[copyIndex()].keyType]",
                "keyOps": "[parameters('keysObject').keys[copyIndex()].keyOps]",
                "keySize": "[parameters('keysObject').keys[copyIndex()].keySize]",
                "curveName": "[parameters('keysObject').keys[copyIndex()].curveName]"
            },
            "copy": {
                "name": "keyCopy",
                "count": "[length(parameters('keysObject').keys)]"
            }
        },
        // Private Endpoints
        {
            "type": "Microsoft.Resources/deployments",
            "apiVersion": "2020-06-01",
            "name": "[concat(uniqueString(deployment().name, parameters('location')), '-KeyVault-PrivateEndpoints','-',copyIndex())]",
            "condition": "[not(empty(parameters('privateEndpoints')))]",
            "dependsOn": [
                "[variables('keyVaultName')]"
            ],
            "copy": {
                "name": "privateEndpointsCopy",
                "count": "[length(parameters('privateEndpoints'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "privateEndpointResourceId": {
                        "value": "[resourceId('Microsoft.KeyVault/vaults/', variables('keyVaultName'))]"
                    },
                    "privateEndpointVnetLocation": {
                        "value": "[if(empty(parameters('privateEndpoints')),'dummy',reference(split(parameters('privateEndpoints')[copyIndex()].subnetResourceId,'/subnets/')[0],'2020-06-01', 'Full').location)]"
                    },
                    "privateEndpoint": {
                        "value": "[parameters('privateEndpoints')[copyIndex()]]"
                    },
                    "tags": {
                        "value": "[parameters('tags')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {                        
                        "privateEndpointResourceId": {
                            "type": "string"
                        },
                        "privateEndpointVnetLocation": {
                            "type": "string"
                        },
                        "privateEndpoint": {
                            "type": "object"
                        },
                        "tags": {
                            "type": "object"
                        }
                    },
                    "variables": {
                        "privateEndpointResourceName": "[last(split(parameters('privateEndpointResourceId'),'/'))]",
                        "privateEndpoint": {
                            "name": "[if(contains(parameters('privateEndpoint'), 'name'),if(empty(parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service),parameters('privateEndpoint').name),concat(variables('privateEndpointResourceName'),'-',parameters('privateEndpoint').service))]",
                            "subnetResourceId": "[parameters('privateEndpoint').subnetResourceId]",
                            "service": [
                                "[parameters('privateEndpoint').service]"
                            ],
                            "privateDnsZoneResourceIds": "[if(contains(parameters('privateEndpoint'), 'privateDnsZoneResourceIds'),if(empty(parameters('privateEndpoint').privateDnsZoneResourceIds),createArray(),parameters('privateEndpoint').privateDnsZoneResourceIds),createArray())]",
                            "customDnsConfigs": "[if(contains(parameters('privateEndpoint'), 'customDnsConfigs'),if(empty(parameters('privateEndpoint').customDnsConfigs),json('null'),parameters('privateEndpoint').customDnsConfigs),json('null'))]"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.Network/privateEndpoints",
                            "apiVersion": "2020-05-01",
                            "name": "[variables('privateEndpoint').name]",
                            "location": "[parameters('privateEndpointVnetLocation')]",
                            "tags": "[parameters('tags')]",
                            "properties": {
                                "privateLinkServiceConnections": [
                                    {
                                        "name": "[variables('privateEndpoint').name]",
                                        "properties": {
                                            "privateLinkServiceId": "[parameters('privateEndpointResourceId')]",
                                            "groupIds": "[variables('privateEndpoint').service]"
                                        }
                                    }
                                ],
                                "manualPrivateLinkServiceConnections": [],
                                "subnet": {
                                    "id": "[variables('privateEndpoint').subnetResourceId]"
                                },
                                "customDnsConfigs": "[variables('privateEndpoint').customDnsConfigs]"
                            }
                        },
                        {
                            "type": "Microsoft.Network/privateEndpoints/privateDnsZoneGroups",
                            "apiVersion": "2020-05-01",
                            "condition": "[not(empty(variables('privateEndpoint').privateDnsZoneResourceIds))]",
                            "name": "[concat(variables('privateEndpoint').name, '/default')]",
                            "dependsOn": [
                                "[resourceId('Microsoft.Network/privateEndpoints', variables('privateEndpoint').name)]"
                            ],
                            "properties": {
                                "copy": [
                                    {
                                        "name": "privateDnsZoneConfigs",
                                        "count": "[length(variables('privateEndpoint').privateDnsZoneResourceIds)]",
                                        "input": {
                                            "name": "[last(split(variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')],'/'))]",
                                            "properties": {
                                                "privateDnsZoneId": "[variables('privateEndpoint').privateDnsZoneResourceIds[copyIndex('privateDnsZoneConfigs')]]"
                                            }
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        },
        // RBAC
        {
            "name": "[concat('rbac-',deployment().name, copyIndex())]",
            "apiVersion": "2020-06-01",
            "type": "Microsoft.Resources/deployments",
            "condition": "[not(empty(parameters('roleAssignments')))]",
            "dependsOn": [
                "[variables('keyVaultName')]"
            ],
            "copy": {
                "name": "rbacDeplCopy",
                "count": "[length(parameters('roleAssignments'))]"
            },
            "properties": {
                "mode": "Incremental",
                "expressionEvaluationOptions": {
                    "scope": "inner"
                },
                "parameters": {
                    "roleAssignment": {
                        "value": "[parameters('roleAssignments')[copyIndex()]]"
                    },
                    "builtInRoleNames": {
                        "value": "[variables('builtInRoleNames')]"
                    },
                    "keyVaultName": {
                        "value": "[variables('keyVaultName')]"
                    }
                },
                "template": {
                    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                    "contentVersion": "1.0.0.0",
                    "parameters": {
                        "roleAssignment": {
                            "type": "object"
                        },
                        "builtInRoleNames": {
                            "type": "object"
                        },
                        "keyVaultName": {
                            "type": "string"
                        }
                    },
                    "resources": [
                        {
                            "type": "Microsoft.KeyVault/vaults/providers/roleAssignments",
                            "apiVersion": "2018-09-01-preview",
                            "name": "[concat(parameters('keyVaultName'), '/Microsoft.Authorization/', guid(uniqueString(concat(parameters('keyVaultName'), array(parameters('roleAssignment').principalIds)[copyIndex('innerRbacCopy')], parameters('roleAssignment').roleDefinitionIdOrName ) )))]",
                            "dependsOn": [
                            ],
                            "copy": {
                                "name": "innerRbacCopy",
                                "count": "[length(parameters('roleAssignment').principalIds)]"
                            },
                            "properties": {
                                "roleDefinitionId": "[if(contains(parameters('builtInRoleNames'), parameters('roleAssignment').roleDefinitionIdOrName ), parameters('builtInRoleNames')[parameters('roleAssignment').roleDefinitionIdOrName] , parameters('roleAssignment').roleDefinitionIdOrName )]",
                                "principalId": "[array(parameters('roleAssignment').principalIds)[copyIndex()]]"
                            }
                        }
                    ]
                }
            }
        }
    ],
    "functions": [
    ],
    "outputs": {
        "keyVaultResourceId": {
            "type": "string",
            "value": "[resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName'))]",
            "metadata": {
                "description": "The Resource Id of the Key Vault."
            }
        },
        "keyVaultResourceGroup": {
            "type": "string",
            "value": "[resourceGroup().name]",
            "metadata": {
                "description": "The name of the Resource Group the Key Vault was created in."
            }
        },
        "keyVaultName": {
            "type": "string",
            "value": "[variables('keyVaultName')]",
            "metadata": {
                "description": "The Name of the Key Vault."
            }
        },
        "keyVaultUrl": {
            "type": "string",
            "value": "[reference(resourceId('Microsoft.KeyVault/vaults', variables('keyVaultName')),'2016-10-01').vaultUri]",
            "metadata": {
                "description": "The URL of the Key Vault."
            }
        }
    }
}
