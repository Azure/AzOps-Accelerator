name: "Shared Steps"

on:
  workflow_call:
  
runs:
  using: 'composite'
  steps:
    - name: "Get Latest AzOps version"
      shell: pwsh
      run: |
        $AzOpsModuleVersion = '${{env.AZOPS_MODULE_VERSION}}'
        if(-not $AzOpsModuleVersion) {
          $latestVersionId = Find-Module -Name AzOps | Select-Object -ExpandProperty Version
          echo "MODULE_VERSION=$latestVersionId" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        }
        else {
          echo "MODULE_VERSION=$AzOpsModuleVersion" | Out-File -FilePath $Env:GITHUB_ENV -Encoding utf-8 -Append
        }
        
    #
    # Cache Dependencies
    # Cache dependencies if version has not changed
    #  
    - name: Cache AzOps module
      if: ${{ env.MODULE_VERSION != '' }}
      id: cache-AzOps
      uses: actions/cache@v3
      with:
        path: ${{ env.modulesFolder }}
        key: '"AzOpsModule" | ${{ env.MODULE_VERSION }}'
    
    #
    # Dependencies
    # Install required runtime modules
    #
    - name: "Dependencies"
      if: env.MODULE_VERSION == '' || steps.cache-AzOps.outputs.cache-hit != 'true' 
      shell: pwsh
      run: |
        if(-not (Test-Path -Path "${{ env.modulesFolder }}")) {
          mkdir ${{ env.modulesFolder }}
        }
        $params = @{
          Name            = 'AzOps'
          Path            = '${{ env.modulesFolder }}'
          Force           = $true
        }
        $params.RequiredVersion = '${{ env.MODULE_VERSION }}'        
        Save-Module @params

    #
    # Connect
    # Authenticate Azure context
    #

    - name: "Connect"
      shell: pwsh
      run: |
        $Env:PSModulePath = $Env:PSModulePath, '${{ env.modulesFolder }}' -join [IO.Path]::PathSeparator
        $azParams = @{
          SubscriptionId  = '${{env.ARM_SUBSCRIPTION_ID}}'
          TenantId        = '${{env.ARM_TENANT_ID}}'
        }
        if ('${{env.ARM_ENVIRONMENT}}' -in (Get-AzEnvironment).Name) {
          $azParams.Environment = '${{env.ARM_ENVIRONMENT}}'
        }
        # Use Service Principal if ARM_CLIENT_ID is set
        if ('${{env.ARM_CLIENT_ID}}') {
          # Use federated credentials if token and no secret exists
          if ($ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN -and -not '${{env.ARM_CLIENT_SECRET}}') {
            $url = "{0}&audience=api://AzureADTokenExchange" -f $ENV:ACTIONS_ID_TOKEN_REQUEST_URL
            $federatedJwt = Invoke-RestMethod -Uri $url -Headers @{Authorization = "Bearer $ENV:ACTIONS_ID_TOKEN_REQUEST_TOKEN"}
            $azParams.ApplicationId = '${{env.ARM_CLIENT_ID}}'
            $azParams.FederatedToken = [System.Net.WebUtility]::UrlEncode($federatedJwt.Value)
          } else {
            $azParams.Credential = (New-Object PSCredential -ArgumentList '${{env.ARM_CLIENT_ID}}', (ConvertTo-SecureString -String '${{env.ARM_CLIENT_SECRET}}' -AsPlainText -Force))  
          }
          Connect-AzAccount -ServicePrincipal @azParams
        } else {
          # Connect with Managed Identity
          Connect-AzAccount -Identity @azParams
        }
