---
name: 'AzOps - Pull'

on:

  #
  # Workflow Dispatch
  # This is to invoke the action from the GitHub UI
  #

  workflow_dispatch:

  #
  # Repository Dispatch
  # Invoke this action based on event / webhook, this
  # could be from an activity logs when a specific condition
  # is met and triggered
  #
  # TODO: PR (22) Remove dispatch type (activity-logs)
  #

  repository_dispatch:
    types:
      - "Azure Activity Logs"
      - "Enterprise-Scale Deployment"
      - "Enterprise-Scale Event"

  #
  # Schedule
  # This is an [optional] event to get latest Azure
  # hierarchy of Management Group and Subscription in
  # your Git in recurring manner. Default is every 6 hours
  #
  # Adjust frequency based on your organization need
  #

  schedule:
    - cron: "0 */6 * * *"

jobs:

  pull:

    #
    # Pull
    #

    name: 'Pull'
    runs-on: ubuntu-20.04

    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:

      #
      # Checkout
      # Checks-out the repository
      #

      - name: 'Checkout'
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      #
      # Configure
      # Set global options
      #

      - name: 'Configure'
        run: |
          git config user.name github-actions
          git config user.email '41898282+github-actions[bot]@users.noreply.github.com'
        shell: bash

      #
      # Checkout
      # Switch branches
      #

      - name: 'Checkout'
        run: |
          git checkout -b automated
        shell: bash

      #
      # Dependencies
      # Install required runtime modules
      #

      - name: 'Dependencies'
        run: |
          $modules = @(
              @{ Name = "Az.Accounts"; Repository = "PSGallery"; RequiredVersion = "2.2.5" },
              @{ Name = "Az.Billing"; Repository = "PSGallery"; RequiredVersion = "2.0.0" },
              @{ Name = "Az.Resources"; Repository = "PSGallery"; RequiredVersion = "3.2.1" },
              @{ Name = "PSFramework"; Repository = "PSGallery"; RequiredVersion = "1.6.181" },
              @{ Name = "AzOps"; Repository = "PSGallery"; AllowPrerelease = $true }
          )
          $modules | ForEach-Object {
              $module = $_
              Install-Module @module -Force -Verbose
          }
        shell: pwsh

      #
      # Connect
      # Authenticate Azure context
      #

      - name: 'Connect'
        run: |
          $credential = New-Object PSCredential -ArgumentList $env:ARM_CLIENT_ID, (ConvertTo-SecureString -String $env:ARM_CLIENT_SECRET -AsPlainText -Force)
          Connect-AzAccount -TenantId $env:ARM_TENANT_ID -ServicePrincipal -Credential $credential -SubscriptionId $env:ARM_SUBSCRIPTION_ID
        shell: pwsh

      #
      # Initialize
      # Generate new state data
      #

      - name: 'Initialize'
        run: |
          Import-PSFConfig -Path settings.json -Schema MetaJson
          Initialize-AzOpsRepository -Rebuild
          Get-Job | Remove-Job -Force
        shell: pwsh

      #
      # Status
      # Check for data changes
      #

      - name: 'Status'
        id: status
        run: |
          STATUS=$(git status --short)
          echo $STATUS
          if [ -z "$STATUS" ]
          then
            echo $STATUS
            echo "::set-output name=state::stop"
          else
            echo $STATUS
            echo "::set-output name=state::continue"
          fi
        shell: bash

      #
      # Add
      # Add file content to index
      #

      - name: 'Add'
        if: steps.status.outputs.state == 'continue'
        run: |
          git add ./azops
        shell: bash

      #
      # Commit
      # Record changes to the repository
      #

      - name: 'Commit'
        run: |
          git commit -m "Automated commit"
        shell: bash
        if: steps.status.outputs.state == 'continue'

      #
      # Push
      # Update remote refs along with associated objects
      #

      - name: 'Push'
        run: |
          git push origin automated -f
        shell: bash
        if: steps.status.outputs.state == 'continue'

      #
      # Merge
      # Automatically merge the head branch into base
      #

      - name: 'Merge'
        run: |
          gh pr create --title "Automated State" --body "..." --base ${{ github.ref }} --head "automated"
          gh pr merge "automated" --squash --delete-branch
        shell: bash
        if: steps.status.outputs.state == 'continue'